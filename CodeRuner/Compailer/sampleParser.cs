//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from sample.g by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class sampleParser : Parser {
	public const int
		STRING=1, REAL=2, BOOL=3, DOUBLE=4, BYTE=5, IF=6, TO=7, FOR=8, MFOR=9, 
		STEP=10, THEN=11, BEGIN=12, END=13, WHILE=14, ELSE=15, READ=16, READLINE=17, 
		WRITE=18, MODULE=19, INPUT=20, OUTPUT=21, RETURN=22, TRUE=23, FALSE=24, 
		PLUS=25, OPL=26, OPR=27, MINUS=28, MULTIPLIE=29, DIVIDE=30, ASSIGN=31, 
		PERCENT=32, FACTORIAL=33, POWER=34, AND=35, OR=36, XOR=37, NOT=38, LESSER=39, 
		BIGGER=40, LESSEREQUAL=41, BIGGEREQUAL=42, EQUAl=43, OPPOSITE=44, OPIF=45, 
		OPDOT=46, SEPARATOR=47, ID=48, WS=49, REALCONST=50, INTCONST=51, HEXCONST=52, 
		STRCONST=53, COMMENT1=54, COMMENT2=55, KAMA=56;
	public const int
		RULE_prog = 0, RULE_ghias = 1, RULE_meghdar = 2, RULE_wr = 3, RULE_entesab = 4, 
		RULE_scope = 5, RULE_ifThenElse = 6, RULE_while = 7, RULE_forloop = 8, 
		RULE_forsteploop = 9, RULE_noe = 10, RULE_tarife_moteghir = 11, RULE_farakhan = 12, 
		RULE_sakhtar = 13, RULE_tabe = 14, RULE_ebarat = 15;
	public static readonly string[] ruleNames = {
		"prog", "ghias", "meghdar", "wr", "entesab", "scope", "ifThenElse", "while", 
		"forloop", "forsteploop", "noe", "tarife_moteghir", "farakhan", "sakhtar", 
		"tabe", "ebarat"
	};

	private static readonly string[] _LiteralNames = {
		null, "'String'", "'Int'", "'Bool'", "'Double'", "'Byte'", "'If'", "'To'", 
		"'For'", "'Mfor'", "'Step'", "'Then'", "'Begin'", "'End'", "'While'", 
		"'Else'", "'Read'", "'ReadLine'", "'Write'", "'Fanction'", "'Input'", 
		"'Output'", "'Return'", "'True'", "'False'", "'+'", "'('", "')'", "'-'", 
		"'*'", "'/'", "'='", "'%'", "'!'", "'^'", "'And'", "'Or'", "'Xor'", "'Not'", 
		"'<'", "'>'", "'<='", "'>='", "'=='", "'<>'", "'?'", "':'", "';'", null, 
		null, null, null, null, null, null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "REAL", "BOOL", "DOUBLE", "BYTE", "IF", "TO", "FOR", "MFOR", 
		"STEP", "THEN", "BEGIN", "END", "WHILE", "ELSE", "READ", "READLINE", "WRITE", 
		"MODULE", "INPUT", "OUTPUT", "RETURN", "TRUE", "FALSE", "PLUS", "OPL", 
		"OPR", "MINUS", "MULTIPLIE", "DIVIDE", "ASSIGN", "PERCENT", "FACTORIAL", 
		"POWER", "AND", "OR", "XOR", "NOT", "LESSER", "BIGGER", "LESSEREQUAL", 
		"BIGGEREQUAL", "EQUAl", "OPPOSITE", "OPIF", "OPDOT", "SEPARATOR", "ID", 
		"WS", "REALCONST", "INTCONST", "HEXCONST", "STRCONST", "COMMENT1", "COMMENT2", 
		"KAMA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sample.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


	    CodeRuner.Compailer.Scope SymbolTable = new CodeRuner.Compailer.Scope(); //Symbols table of variables
	    CodeRuner.tabdil_noe tabdil_noe = new CodeRuner.tabdil_noe();
		public  List<string> khata_parser = new List<string>();
		public string cod= "class Program "+Environment.NewLine+"{ "+Environment.NewLine;
	    //public  int andis = 0;
		public void khata_ezaf_kon(string onsor)
	    {
	        khata_parser.Add( onsor);
	    }
	    public void khata_pakon()
	    {
	        khata_parser.Clear();
	    }
	    public void khata_kam_kon()
	    {
	        //andis--;
	        //khata_parser[andis] = "";
	    }

	public sampleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public TabeContext _tabe;
		public Tarife_moteghirContext _tarife_moteghir;
		public ITerminalNode Eof() { return GetToken(sampleParser.Eof, 0); }
		public TabeContext[] tabe() {
			return GetRuleContexts<TabeContext>();
		}
		public TabeContext tabe(int i) {
			return GetRuleContext<TabeContext>(i);
		}
		public Tarife_moteghirContext[] tarife_moteghir() {
			return GetRuleContexts<Tarife_moteghirContext>();
		}
		public Tarife_moteghirContext tarife_moteghir(int i) {
			return GetRuleContext<Tarife_moteghirContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MODULE || _la==ID) {
				{
				State = 38;
				switch (TokenStream.La(1)) {
				case MODULE:
					{
					State = 32; _localctx._tabe = tabe();
					cod+=Environment.NewLine+_localctx._tabe.Csharp;
					}
					break;
				case ID:
					{
					State = 35; _localctx._tarife_moteghir = tarife_moteghir();
					cod+=Environment.NewLine+_localctx._tarife_moteghir.Csharp+";";
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 43; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GhiasContext : ParserRuleContext {
		public string Csharp = "";
		public ITerminalNode LESSER() { return GetToken(sampleParser.LESSER, 0); }
		public ITerminalNode BIGGER() { return GetToken(sampleParser.BIGGER, 0); }
		public ITerminalNode LESSEREQUAL() { return GetToken(sampleParser.LESSEREQUAL, 0); }
		public ITerminalNode BIGGEREQUAL() { return GetToken(sampleParser.BIGGEREQUAL, 0); }
		public ITerminalNode OPPOSITE() { return GetToken(sampleParser.OPPOSITE, 0); }
		public ITerminalNode EQUAl() { return GetToken(sampleParser.EQUAl, 0); }
		public GhiasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ghias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterGhias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitGhias(this);
		}
	}

	[RuleVersion(0)]
	public GhiasContext ghias() {
		GhiasContext _localctx = new GhiasContext(Context, State);
		EnterRule(_localctx, 2, RULE_ghias);
		try {
			State = 57;
			switch (TokenStream.La(1)) {
			case LESSER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; Match(LESSER);
				_localctx.Csharp = "<";
				}
				break;
			case BIGGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; Match(BIGGER);
				_localctx.Csharp = ">";
				}
				break;
			case LESSEREQUAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49; Match(LESSEREQUAL);
				_localctx.Csharp = "<=";
				}
				break;
			case BIGGEREQUAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51; Match(BIGGEREQUAL);
				_localctx.Csharp = "=>";
				}
				break;
			case OPPOSITE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 53; Match(OPPOSITE);
				_localctx.Csharp = "!=";
				}
				break;
			case EQUAl:
				EnterOuterAlt(_localctx, 6);
				{
				State = 55; Match(EQUAl);
				_localctx.Csharp = "==";
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeghdarContext : ParserRuleContext {
		public string Type;
		public string Csharp = "";
		public IToken _ID;
		public IToken _INTCONST;
		public IToken _REALCONST;
		public FarakhanContext _farakhan;
		public IToken _STRCONST;
		public IToken _TRUE;
		public IToken _FALSE;
		public ITerminalNode ID() { return GetToken(sampleParser.ID, 0); }
		public ITerminalNode INTCONST() { return GetToken(sampleParser.INTCONST, 0); }
		public ITerminalNode REALCONST() { return GetToken(sampleParser.REALCONST, 0); }
		public FarakhanContext farakhan() {
			return GetRuleContext<FarakhanContext>(0);
		}
		public ITerminalNode STRCONST() { return GetToken(sampleParser.STRCONST, 0); }
		public ITerminalNode TRUE() { return GetToken(sampleParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(sampleParser.FALSE, 0); }
		public MeghdarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meghdar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterMeghdar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitMeghdar(this);
		}
	}

	[RuleVersion(0)]
	public MeghdarContext meghdar() {
		MeghdarContext _localctx = new MeghdarContext(Context, State);
		EnterRule(_localctx, 4, RULE_meghdar);
		try {
			State = 74;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; _localctx._ID = Match(ID);

								_localctx.Csharp = (_localctx._ID!=null?_localctx._ID.Text:null);
								//Check Symbol Exists in Symbol Table
								var symbol = SymbolTable.FindSymbol((_localctx._ID!=null?_localctx._ID.Text:null));
								if(symbol == null)
								{
								//console.Beep();
								khata_ezaf_kon("Undefined varaiable "+(_localctx._ID!=null?_localctx._ID.Text:null));
								_localctx.Type = "no_type";
									}
								else 
								{
								_localctx.Type = symbol.SymbolType;
								//khata_ezaf_kon( "Type of "+symbol.SymbolName+" is : "+symbol.SymbolType);
								//SymbolType
								}
							
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61; _localctx._INTCONST = Match(INTCONST);
				_localctx.Csharp = (_localctx._INTCONST!=null?_localctx._INTCONST.Text:null);_localctx.Type = "int";
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63; _localctx._REALCONST = Match(REALCONST);
				_localctx.Csharp = (_localctx._REALCONST!=null?_localctx._REALCONST.Text:null);_localctx.Type = "int";
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 65; _localctx._farakhan = farakhan();

								_localctx.Csharp = _localctx._farakhan.Csharp;
								//Check Symbol Exists in Symbol Table
								var symbol = SymbolTable.FindSymbol(_localctx._farakhan.text);
								if(symbol == null)
								{
								//console.Beep();
								khata_ezaf_kon("\nUndefined function "+_localctx._farakhan.text);
								_localctx.Type = "no_type";
								}
								else 
								{
								_localctx.Type = symbol.SymbolType;
								//khata_ezaf_kon( "Type of "+symbol.SymbolName+" is : "+symbol.SymbolType);
								//SymbolType
								}
							
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 68; _localctx._STRCONST = Match(STRCONST);
				_localctx.Csharp = (_localctx._STRCONST!=null?_localctx._STRCONST.Text:null);_localctx.Type = "string";
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 70; _localctx._TRUE = Match(TRUE);
				_localctx.Csharp = (_localctx._TRUE!=null?_localctx._TRUE.Text:null);_localctx.Type = "bool";
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 72; _localctx._FALSE = Match(FALSE);
				_localctx.Csharp = (_localctx._FALSE!=null?_localctx._FALSE.Text:null);_localctx.Type = "bool";
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WrContext : ParserRuleContext {
		public string Csharp = "";
		public EbaratContext _ebarat;
		public IToken _ID;
		public ITerminalNode WRITE() { return GetToken(sampleParser.WRITE, 0); }
		public ITerminalNode OPL() { return GetToken(sampleParser.OPL, 0); }
		public EbaratContext ebarat() {
			return GetRuleContext<EbaratContext>(0);
		}
		public ITerminalNode OPR() { return GetToken(sampleParser.OPR, 0); }
		public ITerminalNode READ() { return GetToken(sampleParser.READ, 0); }
		public ITerminalNode ID() { return GetToken(sampleParser.ID, 0); }
		public ITerminalNode READLINE() { return GetToken(sampleParser.READLINE, 0); }
		public WrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterWr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitWr(this);
		}
	}

	[RuleVersion(0)]
	public WrContext wr() {
		WrContext _localctx = new WrContext(Context, State);
		EnterRule(_localctx, 6, RULE_wr);
		try {
			State = 96;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76; Match(WRITE);
				State = 77; Match(OPL);
				State = 78; _localctx._ebarat = ebarat(0);
				_localctx.Csharp = "System.Console.Write("+_localctx._ebarat.Csharp+")";
				State = 80; Match(OPR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; Match(READ);
				State = 83; Match(OPL);
				State = 84; _localctx._ID = Match(ID);
					_localctx.Csharp = (_localctx._ID!=null?_localctx._ID.Text:null)+" = System.Console.Read()";
							//Check Symbol Exists in Symbol Table
							var symbol = SymbolTable.FindSymbol((_localctx._ID!=null?_localctx._ID.Text:null).ToLower());
							if(symbol == null)
								{
								//console.Beep();
								khata_ezaf_kon("\nUndefined varaiable "+(_localctx._ID!=null?_localctx._ID.Text:null));
								}	 
						
				State = 86; Match(OPR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 87; Match(READLINE);
				State = 88; Match(OPL);
				State = 89; _localctx._ID = Match(ID);
					_localctx.Csharp = (_localctx._ID!=null?_localctx._ID.Text:null)+" = System.Console.ReadLine()";
							//Check Symbol Exists in Symbol Table
							var symbol = SymbolTable.FindSymbol((_localctx._ID!=null?_localctx._ID.Text:null).ToLower());
							if(symbol == null)
								{
								//console.Beep();
								khata_ezaf_kon("\nUndefined varaiable "+(_localctx._ID!=null?_localctx._ID.Text:null));
								}	 
						
				State = 91; Match(OPR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 92; Match(READ);
				State = 93; Match(OPL);
					_localctx.Csharp = "System.Console.Read()"; 
						
				State = 95; Match(OPR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntesabContext : ParserRuleContext {
		public string Csharp = "";
		public IToken _ID;
		public EbaratContext _ebarat;
		public ITerminalNode ID() { return GetToken(sampleParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(sampleParser.ASSIGN, 0); }
		public EbaratContext ebarat() {
			return GetRuleContext<EbaratContext>(0);
		}
		public ITerminalNode SEPARATOR() { return GetToken(sampleParser.SEPARATOR, 0); }
		public EntesabContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entesab; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterEntesab(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitEntesab(this);
		}
	}

	[RuleVersion(0)]
	public EntesabContext entesab() {
		EntesabContext _localctx = new EntesabContext(Context, State);
		EnterRule(_localctx, 8, RULE_entesab);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; _localctx._ID = Match(ID);
			State = 99; Match(ASSIGN);
			State = 100; _localctx._ebarat = ebarat(0);
				
						_localctx.Csharp = (_localctx._ID!=null?_localctx._ID.Text:null)+" = "+_localctx._ebarat.Csharp+";";
						//Check Symbol Exists in Symbol Table
						var symbol = SymbolTable.FindSymbol((_localctx._ID!=null?_localctx._ID.Text:null).ToLower());
						if(symbol == null)
							{
							//console.Beep();
							khata_ezaf_kon("\nUndefined varaiable "+(_localctx._ID!=null?_localctx._ID.Text:null));
							}
						else 
						{
						if (tabdil_noe.tabdil_pazir(_localctx._ebarat.Type,symbol.SymbolType))
						khata_ezaf_kon( "Assign "+symbol.SymbolType+" to "+_localctx._ebarat.Type +" isn't valid");
						//SymbolType
						}
						
					
			State = 102; Match(SEPARATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		public string Csharp = "";
		public SakhtarContext _sakhtar;
		public ITerminalNode BEGIN() { return GetToken(sampleParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(sampleParser.END, 0); }
		public SakhtarContext[] sakhtar() {
			return GetRuleContexts<SakhtarContext>();
		}
		public SakhtarContext sakhtar(int i) {
			return GetRuleContext<SakhtarContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 10, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(BEGIN);

											_localctx.Csharp+="{";
											SymbolTable.EnterScope();
											
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << MFOR) | (1L << BEGIN) | (1L << WHILE) | (1L << READ) | (1L << READLINE) | (1L << WRITE) | (1L << RETURN) | (1L << ID))) != 0)) {
				{
				{
				State = 106; _localctx._sakhtar = sakhtar();
				_localctx.Csharp+=Environment.NewLine+_localctx._sakhtar.Csharp;
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 114; Match(END);

										   _localctx.Csharp+=Environment.NewLine+"}"+Environment.NewLine;
										   SymbolTable.ExitScope();
										   
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseContext : ParserRuleContext {
		public string Csharp = "";
		public EbaratContext _ebarat;
		public ScopeContext _scope;
		public IfThenElseContext a;
		public SakhtarContext _sakhtar;
		public ITerminalNode IF() { return GetToken(sampleParser.IF, 0); }
		public EbaratContext ebarat() {
			return GetRuleContext<EbaratContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(sampleParser.THEN, 0); }
		public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ITerminalNode[] ELSE() { return GetTokens(sampleParser.ELSE); }
		public ITerminalNode ELSE(int i) {
			return GetToken(sampleParser.ELSE, i);
		}
		public ITerminalNode BEGIN() { return GetToken(sampleParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(sampleParser.END, 0); }
		public IfThenElseContext[] ifThenElse() {
			return GetRuleContexts<IfThenElseContext>();
		}
		public IfThenElseContext ifThenElse(int i) {
			return GetRuleContext<IfThenElseContext>(i);
		}
		public SakhtarContext[] sakhtar() {
			return GetRuleContexts<SakhtarContext>();
		}
		public SakhtarContext sakhtar(int i) {
			return GetRuleContext<SakhtarContext>(i);
		}
		public IfThenElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitIfThenElse(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseContext ifThenElse() {
		IfThenElseContext _localctx = new IfThenElseContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifThenElse);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(IF);
			State = 118; _localctx._ebarat = ebarat(0);

									if (tabdil_noe.tabdil_pazir(_localctx._ebarat.Type, "bool"))
										{
										khata_ezaf_kon("the condition must have boolean type but have "+_localctx._ebarat.Type+" type"); 
										}
								
			State = 120; Match(THEN);
			State = 121; _localctx._scope = scope();
			_localctx.Csharp = Environment.NewLine+" if ("+_localctx._ebarat.Csharp+") "+Environment.NewLine+_localctx._scope.Csharp+Environment.NewLine;
			State = 129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 123; Match(ELSE);
					State = 124; _localctx.a = ifThenElse();
					_localctx.Csharp+="else "+_localctx.a.Csharp;
					}
					} 
				}
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 145;
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 132; Match(ELSE);
				State = 133; Match(BEGIN);
				_localctx.Csharp+="else "+Environment.NewLine+"{"+Environment.NewLine;
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << MFOR) | (1L << BEGIN) | (1L << WHILE) | (1L << READ) | (1L << READLINE) | (1L << WRITE) | (1L << RETURN) | (1L << ID))) != 0)) {
					{
					{
					State = 135; _localctx._sakhtar = sakhtar();
					_localctx.Csharp+=Environment.NewLine+_localctx._sakhtar.Csharp;
					}
					}
					State = 142;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 143; Match(END);
				_localctx.Csharp+=Environment.NewLine+"}";
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public string Csharp = "";
		public EbaratContext _ebarat;
		public SakhtarContext _sakhtar;
		public ITerminalNode WHILE() { return GetToken(sampleParser.WHILE, 0); }
		public EbaratContext ebarat() {
			return GetRuleContext<EbaratContext>(0);
		}
		public ITerminalNode BEGIN() { return GetToken(sampleParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(sampleParser.END, 0); }
		public SakhtarContext[] sakhtar() {
			return GetRuleContexts<SakhtarContext>();
		}
		public SakhtarContext sakhtar(int i) {
			return GetRuleContext<SakhtarContext>(i);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 14, RULE_while);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(WHILE);
			State = 148; _localctx._ebarat = ebarat(0);

						_localctx.Csharp = "while ("+_localctx._ebarat.Csharp+")"+Environment.NewLine+"{"+Environment.NewLine;
									if (tabdil_noe.tabdil_pazir(_localctx._ebarat.Type, "bool"))
										{
										khata_ezaf_kon("the condition must have boolean type but have "+_localctx._ebarat.Type+" type"); 
										}
						
			State = 150; Match(BEGIN);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << MFOR) | (1L << BEGIN) | (1L << WHILE) | (1L << READ) | (1L << READLINE) | (1L << WRITE) | (1L << RETURN) | (1L << ID))) != 0)) {
				{
				{
				State = 151; _localctx._sakhtar = sakhtar();
				_localctx.Csharp+=Environment.NewLine+_localctx._sakhtar.Csharp;
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 159; Match(END);
			_localctx.Csharp+=Environment.NewLine+"}";
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForloopContext : ParserRuleContext {
		public string Csharp;
		public IToken a;
		public Tarife_moteghirContext aa;
		public Tarife_moteghirContext _tarife_moteghir;
		public EntesabContext _entesab;
		public EbaratContext b;
		public SakhtarContext _sakhtar;
		public ITerminalNode FOR() { return GetToken(sampleParser.FOR, 0); }
		public ITerminalNode TO() { return GetToken(sampleParser.TO, 0); }
		public ITerminalNode THEN() { return GetToken(sampleParser.THEN, 0); }
		public ITerminalNode BEGIN() { return GetToken(sampleParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(sampleParser.END, 0); }
		public EbaratContext ebarat() {
			return GetRuleContext<EbaratContext>(0);
		}
		public EntesabContext entesab() {
			return GetRuleContext<EntesabContext>(0);
		}
		public ITerminalNode ID() { return GetToken(sampleParser.ID, 0); }
		public Tarife_moteghirContext tarife_moteghir() {
			return GetRuleContext<Tarife_moteghirContext>(0);
		}
		public SakhtarContext[] sakhtar() {
			return GetRuleContexts<SakhtarContext>();
		}
		public SakhtarContext sakhtar(int i) {
			return GetRuleContext<SakhtarContext>(i);
		}
		public ForloopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forloop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterForloop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitForloop(this);
		}
	}

	[RuleVersion(0)]
	public ForloopContext forloop() {
		ForloopContext _localctx = new ForloopContext(Context, State);
		EnterRule(_localctx, 16, RULE_forloop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(FOR);
			_localctx.Csharp+="for (";
			State = 172;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 164; _localctx.a = Match(ID);
				_localctx.Csharp+=(_localctx.a!=null?_localctx.a.Text:null)+"=0";
				}
				break;
			case 2:
				{
				State = 166; _localctx.aa = _localctx._tarife_moteghir = tarife_moteghir();
				_localctx.Csharp+=_localctx._tarife_moteghir.Csharp;
				}
				break;
			case 3:
				{
				State = 169; _localctx._entesab = entesab();
				_localctx.Csharp = _localctx._entesab.Csharp;
				}
				break;
			}
			_localctx.Csharp+=";";
			State = 175; Match(TO);
			State = 176; _localctx.b = ebarat(0);

                _localctx.Csharp += (_localctx.a != null ? _localctx.a.Text : null) + (_localctx.aa != null ? _localctx.aa.Csharp : null) + "<" + _localctx.b.Csharp + ";" + (_localctx.a != null ? _localctx.a.Text : null) + (_localctx.aa != null ? _localctx.aa.Csharp : null) + "++)" + Environment.NewLine;

                State = 178; Match(THEN);
			State = 179; Match(BEGIN);
			_localctx.Csharp+=" {";
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << MFOR) | (1L << BEGIN) | (1L << WHILE) | (1L << READ) | (1L << READLINE) | (1L << WRITE) | (1L << RETURN) | (1L << ID))) != 0)) {
				{
				{
				State = 181; _localctx._sakhtar = sakhtar();
				_localctx.Csharp+=_localctx._sakhtar.Csharp;
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 189; Match(END);
			_localctx.Csharp+=" }";
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForsteploopContext : ParserRuleContext {
		public string Csharp;
		public IToken a;
		public Tarife_moteghirContext _tarife_moteghir;
		public EntesabContext _entesab;
		public EbaratContext b;
		public SakhtarContext _sakhtar;
		public ITerminalNode MFOR() { return GetToken(sampleParser.MFOR, 0); }
		public ITerminalNode TO() { return GetToken(sampleParser.TO, 0); }
		public ITerminalNode THEN() { return GetToken(sampleParser.THEN, 0); }
		public ITerminalNode BEGIN() { return GetToken(sampleParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(sampleParser.END, 0); }
		public EbaratContext ebarat() {
			return GetRuleContext<EbaratContext>(0);
		}
		public Tarife_moteghirContext tarife_moteghir() {
			return GetRuleContext<Tarife_moteghirContext>(0);
		}
		public EntesabContext entesab() {
			return GetRuleContext<EntesabContext>(0);
		}
		public ITerminalNode ID() { return GetToken(sampleParser.ID, 0); }
		public SakhtarContext[] sakhtar() {
			return GetRuleContexts<SakhtarContext>();
		}
		public SakhtarContext sakhtar(int i) {
			return GetRuleContext<SakhtarContext>(i);
		}
		public ForsteploopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forsteploop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterForsteploop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitForsteploop(this);
		}
	}

	[RuleVersion(0)]
	public ForsteploopContext forsteploop() {
		ForsteploopContext _localctx = new ForsteploopContext(Context, State);
		EnterRule(_localctx, 18, RULE_forsteploop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(MFOR);
			_localctx.Csharp+="for (";
			State = 203;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 194; _localctx.a = Match(ID);
				_localctx.Csharp+=(_localctx.a!=null?_localctx.a.Text:null)+"=0";
				}
				break;
			case 2:
				{
				State = 196; _localctx._tarife_moteghir = tarife_moteghir();
				_localctx.Csharp+=_localctx._tarife_moteghir.Csharp;
				}
				break;
			case 3:
				{
				}
				break;
			case 4:
				{
				State = 200; _localctx._entesab = entesab();
				_localctx.Csharp = _localctx._entesab.Csharp;
				}
				break;
			}
			_localctx.Csharp+=";";
			State = 206; Match(TO);
			State = 207; _localctx.b = ebarat(0);

												_localctx.Csharp+=(_localctx.a!=null?_localctx.a.Text:null)+">"+ _localctx.b.Csharp+";"+(_localctx.a!=null?_localctx.a.Text:null)+"--)"+Environment.NewLine;
											
			State = 209; Match(THEN);
			State = 210; Match(BEGIN);
			_localctx.Csharp+=" {";
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << MFOR) | (1L << BEGIN) | (1L << WHILE) | (1L << READ) | (1L << READLINE) | (1L << WRITE) | (1L << RETURN) | (1L << ID))) != 0)) {
				{
				{
				State = 212; _localctx._sakhtar = sakhtar();
				_localctx.Csharp+=_localctx._sakhtar.Csharp;
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 220; Match(END);
			_localctx.Csharp+=" }";
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoeContext : ParserRuleContext {
		public string Type;
		public string Csharp;
		public ITerminalNode STRING() { return GetToken(sampleParser.STRING, 0); }
		public ITerminalNode REAL() { return GetToken(sampleParser.REAL, 0); }
		public ITerminalNode BOOL() { return GetToken(sampleParser.BOOL, 0); }
		public NoeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterNoe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitNoe(this);
		}
	}

	[RuleVersion(0)]
	public NoeContext noe() {
		NoeContext _localctx = new NoeContext(Context, State);
		EnterRule(_localctx, 20, RULE_noe);
		try {
			State = 233;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; Match(STRING);
				_localctx.Csharp = "string";_localctx.Type =  "string"; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; Match(REAL);
				_localctx.Csharp = "int";_localctx.Type =  "int"; 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 227; Match(BOOL);
				_localctx.Csharp = "bool";_localctx.Type =  "dool"; 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 229; Match(BOOL);
				_localctx.Csharp = "double";_localctx.Type =  "double"; 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 231; Match(BOOL);
				_localctx.Csharp = "byte";_localctx.Type =  "byte"; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tarife_moteghirContext : ParserRuleContext {
		public string Csharp = "";
		public IToken _ID;
		public NoeContext _noe;
		public ITerminalNode ID() { return GetToken(sampleParser.ID, 0); }
		public ITerminalNode OPDOT() { return GetToken(sampleParser.OPDOT, 0); }
		public NoeContext noe() {
			return GetRuleContext<NoeContext>(0);
		}
		public ITerminalNode SEPARATOR() { return GetToken(sampleParser.SEPARATOR, 0); }
		public Tarife_moteghirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tarife_moteghir; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterTarife_moteghir(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitTarife_moteghir(this);
		}
	}

	[RuleVersion(0)]
	public Tarife_moteghirContext tarife_moteghir() {
		Tarife_moteghirContext _localctx = new Tarife_moteghirContext(Context, State);
		EnterRule(_localctx, 22, RULE_tarife_moteghir);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; _localctx._ID = Match(ID);
			State = 236; Match(OPDOT);
			State = 237; _localctx._noe = noe();
			State = 238; Match(SEPARATOR);

													_localctx.Csharp+=_localctx._noe.Csharp+" "+(_localctx._ID!=null?_localctx._ID.Text:null);
													if (SymbolTable.FindInScope((_localctx._ID!=null?_localctx._ID.Text:null).ToLower(),"varaiable"))
														SymbolTable.AddSymbol((_localctx._ID!=null?_localctx._ID.Text:null).ToLower(),_localctx._noe.Type);
													
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FarakhanContext : ParserRuleContext {
		public string Type;
		public string text;
		public string Csharp = "";
		public IToken _ID;
		public EbaratContext _ebarat;
		public ITerminalNode ID() { return GetToken(sampleParser.ID, 0); }
		public ITerminalNode OPL() { return GetToken(sampleParser.OPL, 0); }
		public ITerminalNode OPR() { return GetToken(sampleParser.OPR, 0); }
		public EbaratContext[] ebarat() {
			return GetRuleContexts<EbaratContext>();
		}
		public EbaratContext ebarat(int i) {
			return GetRuleContext<EbaratContext>(i);
		}
		public ITerminalNode[] KAMA() { return GetTokens(sampleParser.KAMA); }
		public ITerminalNode KAMA(int i) {
			return GetToken(sampleParser.KAMA, i);
		}
		public FarakhanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_farakhan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterFarakhan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitFarakhan(this);
		}
	}

	[RuleVersion(0)]
	public FarakhanContext farakhan() {
		FarakhanContext _localctx = new FarakhanContext(Context, State);
		EnterRule(_localctx, 24, RULE_farakhan);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; _localctx._ID = Match(ID);
			_localctx.Csharp+=(_localctx._ID!=null?_localctx._ID.Text:null)+"(";
			State = 243; Match(OPL);
			State = 255;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << OPL) | (1L << ID) | (1L << REALCONST) | (1L << INTCONST) | (1L << STRCONST))) != 0)) {
				{
				State = 244; _localctx._ebarat = ebarat(0);
				_localctx.Csharp+=_localctx._ebarat.Csharp;
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==KAMA) {
					{
					{
					State = 246; Match(KAMA);
					State = 247; _localctx._ebarat = ebarat(0);
					_localctx.Csharp+=","+_localctx._ebarat.Csharp;
					}
					}
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			{_localctx.Csharp+=")";}
			State = 258; Match(OPR);

												var symbol = SymbolTable.FindSymbol((_localctx._ID!=null?_localctx._ID.Text:null));
												if(symbol == null){khata_ezaf_kon( "\nUndefined function "+(_localctx._ID!=null?_localctx._ID.Text:null));_localctx.Type = "no_type";}
												else {
													khata_ezaf_kon( "Type of "+symbol.SymbolName+" is : "+symbol.SymbolType+" ");
													_localctx.Type = symbol.SymbolType;
													_localctx.text = (_localctx._ID!=null?_localctx._ID.Text:null);
													 }
												
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SakhtarContext : ParserRuleContext {
		public string Type = "void";
		public string Csharp = "";
		public EntesabContext _entesab;
		public EbaratContext _ebarat;
		public IfThenElseContext _ifThenElse;
		public WhileContext _while;
		public FarakhanContext _farakhan;
		public WrContext _wr;
		public Tarife_moteghirContext _tarife_moteghir;
		public ForloopContext _forloop;
		public ForsteploopContext _forsteploop;
		public ScopeContext _scope;
		public EntesabContext entesab() {
			return GetRuleContext<EntesabContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(sampleParser.RETURN, 0); }
		public EbaratContext ebarat() {
			return GetRuleContext<EbaratContext>(0);
		}
		public ITerminalNode SEPARATOR() { return GetToken(sampleParser.SEPARATOR, 0); }
		public IfThenElseContext ifThenElse() {
			return GetRuleContext<IfThenElseContext>(0);
		}
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public FarakhanContext farakhan() {
			return GetRuleContext<FarakhanContext>(0);
		}
		public WrContext wr() {
			return GetRuleContext<WrContext>(0);
		}
		public Tarife_moteghirContext tarife_moteghir() {
			return GetRuleContext<Tarife_moteghirContext>(0);
		}
		public ForloopContext forloop() {
			return GetRuleContext<ForloopContext>(0);
		}
		public ForsteploopContext forsteploop() {
			return GetRuleContext<ForsteploopContext>(0);
		}
		public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public SakhtarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sakhtar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterSakhtar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitSakhtar(this);
		}
	}

	[RuleVersion(0)]
	public SakhtarContext sakhtar() {
		SakhtarContext _localctx = new SakhtarContext(Context, State);
		EnterRule(_localctx, 26, RULE_sakhtar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 261; _localctx._entesab = entesab();
				_localctx.Csharp = _localctx._entesab.Csharp;
				}
				break;
			case 2:
				{
				State = 264; Match(RETURN);
				State = 265; _localctx._ebarat = ebarat(0);
				State = 266; Match(SEPARATOR);

																_localctx.Csharp = "return "+_localctx._ebarat.Csharp+";";
																if(_localctx.Type=="void")_localctx.Type = _localctx._ebarat.Type;
															 
				}
				break;
			case 3:
				{
				State = 269; _localctx._ifThenElse = ifThenElse();
				_localctx.Csharp = _localctx._ifThenElse.Csharp;
				}
				break;
			case 4:
				{
				State = 272; _localctx._while = @while();
				_localctx.Csharp = _localctx._while.Csharp;
				}
				break;
			case 5:
				{
				State = 275; _localctx._farakhan = farakhan();
				State = 276; Match(SEPARATOR);
				_localctx.Csharp = _localctx._farakhan.Csharp+";";
				}
				break;
			case 6:
				{
				State = 279; _localctx._wr = wr();
				State = 280; Match(SEPARATOR);
				_localctx.Csharp = _localctx._wr.Csharp+";";
				}
				break;
			case 7:
				{
				State = 283; _localctx._tarife_moteghir = tarife_moteghir();
				_localctx.Csharp = _localctx._tarife_moteghir.Csharp+";";
				}
				break;
			case 8:
				{
				State = 286; _localctx._forloop = forloop();
				_localctx.Csharp = _localctx._forloop.Csharp;
				}
				break;
			case 9:
				{
				State = 289; _localctx._forsteploop = forsteploop();
				_localctx.Csharp = _localctx._forsteploop.Csharp;
				}
				break;
			case 10:
				{
				State = 292; _localctx._scope = scope();
				_localctx.Csharp = _localctx._scope.Csharp;
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabeContext : ParserRuleContext {
		public string Type = "void";
		public string Csharp = "";
		public string A = "void";
		public string B = "";
		public string C = "";
		public string D = "";
		public IToken _ID;
		public Tarife_moteghirContext _tarife_moteghir;
		public NoeContext _noe;
		public SakhtarContext _sakhtar;
		public ITerminalNode MODULE() { return GetToken(sampleParser.MODULE, 0); }
		public ITerminalNode ID() { return GetToken(sampleParser.ID, 0); }
		public ITerminalNode BEGIN() { return GetToken(sampleParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(sampleParser.END, 0); }
		public ITerminalNode INPUT() { return GetToken(sampleParser.INPUT, 0); }
		public ITerminalNode[] OPDOT() { return GetTokens(sampleParser.OPDOT); }
		public ITerminalNode OPDOT(int i) {
			return GetToken(sampleParser.OPDOT, i);
		}
		public ITerminalNode OUTPUT() { return GetToken(sampleParser.OUTPUT, 0); }
		public NoeContext noe() {
			return GetRuleContext<NoeContext>(0);
		}
		public ITerminalNode SEPARATOR() { return GetToken(sampleParser.SEPARATOR, 0); }
		public SakhtarContext[] sakhtar() {
			return GetRuleContexts<SakhtarContext>();
		}
		public SakhtarContext sakhtar(int i) {
			return GetRuleContext<SakhtarContext>(i);
		}
		public Tarife_moteghirContext[] tarife_moteghir() {
			return GetRuleContexts<Tarife_moteghirContext>();
		}
		public Tarife_moteghirContext tarife_moteghir(int i) {
			return GetRuleContext<Tarife_moteghirContext>(i);
		}
		public TabeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterTabe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitTabe(this);
		}
	}

	[RuleVersion(0)]
	public TabeContext tabe() {
		TabeContext _localctx = new TabeContext(Context, State);
		EnterRule(_localctx, 28, RULE_tabe);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(MODULE);
			State = 298; _localctx._ID = Match(ID);
			_localctx.B = (_localctx._ID!=null?_localctx._ID.Text:null).ToLower();
								if (SymbolTable.FindInScope((_localctx._ID!=null?_localctx._ID.Text:null).ToLower(),"function"))
								/*SymbolTable.AddSymbol((_localctx._ID!=null?_localctx._ID.Text:null).ToLower(),"function");*/
								SymbolTable.EnterScope();
								
			State = 309;
			_la = TokenStream.La(1);
			if (_la==INPUT) {
				{
				State = 300; Match(INPUT);
				State = 301; Match(OPDOT);
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 302; _localctx._tarife_moteghir = tarife_moteghir();
					_localctx.C+=_localctx._tarife_moteghir.Csharp+",";
					}
					}
					State = 307;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==ID );
				}
			}

			State = 317;
			_la = TokenStream.La(1);
			if (_la==OUTPUT) {
				{
				State = 311; Match(OUTPUT);
				State = 312; Match(OPDOT);
				State = 313; _localctx._noe = noe();
				State = 314; Match(SEPARATOR);
				_localctx.A = _localctx._noe.Csharp;_localctx.Type = _localctx._noe.Type;
				}
			}

			State = 319; Match(BEGIN);
			SymbolTable.EnterScope();SymbolTable.AddSymbol((_localctx._ID!=null?_localctx._ID.Text:null).ToLower(),_localctx.Type);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << MFOR) | (1L << BEGIN) | (1L << WHILE) | (1L << READ) | (1L << READLINE) | (1L << WRITE) | (1L << RETURN) | (1L << ID))) != 0)) {
				{
				{
				State = 321; _localctx._sakhtar = sakhtar();

											_localctx.D+=Environment.NewLine+_localctx._sakhtar.Csharp;
											if(_localctx.Type!=_localctx._sakhtar.Type)
												{
												if(_localctx.Type=="void"){khata_ezaf_kon("void function can't return something ");}
												else if(tabdil_noe.tabdil_pazir(_localctx.Type,_localctx._sakhtar.Type))
												khata_ezaf_kon("the function must return "+_localctx.Type+" but returned "+_localctx._sakhtar.Type);
												}
											
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 329; Match(END);

								//s=s.Remove(s.Length-1);
								if(_localctx.C.Length!=0)_localctx.C = _localctx.C.Remove(_localctx.C.Length-1);
								if(_localctx.B=="main")_localctx.Csharp = "static "+_localctx.A+" "+"Main"+"("+_localctx.C+")"+Environment.NewLine+"{"+_localctx.D+Environment.NewLine+"}"+Environment.NewLine;
								else _localctx.Csharp = _localctx.A+" "+_localctx.B+"("+_localctx.C+")"+Environment.NewLine+"{"+_localctx.D+Environment.NewLine+"}"+Environment.NewLine;
								Console.Write("@@@ "+_localctx.Csharp+" @@@");
								SymbolTable.ExitScope();SymbolTable.ExitScope();
								SymbolTable.AddSymbol((_localctx._ID!=null?_localctx._ID.Text:null).ToLower(),_localctx.Type);
								
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbaratContext : ParserRuleContext {
		public string Type;
		public string Csharp;
		public EbaratContext a;
		public MeghdarContext _meghdar;
		public EbaratContext b;
		public GhiasContext _ghias;
		public ITerminalNode OPL() { return GetToken(sampleParser.OPL, 0); }
		public ITerminalNode OPR() { return GetToken(sampleParser.OPR, 0); }
		public EbaratContext[] ebarat() {
			return GetRuleContexts<EbaratContext>();
		}
		public EbaratContext ebarat(int i) {
			return GetRuleContext<EbaratContext>(i);
		}
		public MeghdarContext meghdar() {
			return GetRuleContext<MeghdarContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(sampleParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(sampleParser.MINUS, 0); }
		public ITerminalNode MULTIPLIE() { return GetToken(sampleParser.MULTIPLIE, 0); }
		public ITerminalNode DIVIDE() { return GetToken(sampleParser.DIVIDE, 0); }
		public ITerminalNode POWER() { return GetToken(sampleParser.POWER, 0); }
		public ITerminalNode AND() { return GetToken(sampleParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(sampleParser.OR, 0); }
		public GhiasContext ghias() {
			return GetRuleContext<GhiasContext>(0);
		}
		public EbaratContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebarat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.EnterEbarat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsampleListener typedListener = listener as IsampleListener;
			if (typedListener != null) typedListener.ExitEbarat(this);
		}
	}

	[RuleVersion(0)]
	public EbaratContext ebarat() {
		return ebarat(0);
	}

	private EbaratContext ebarat(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EbaratContext _localctx = new EbaratContext(Context, _parentState);
		EbaratContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_ebarat, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			switch (TokenStream.La(1)) {
			case OPL:
				{
				State = 333; Match(OPL);
				State = 334; _localctx.a = ebarat(0);
				State = 335; Match(OPR);
				_localctx.Csharp = "("+_localctx.a.Csharp+")";_localctx.Type = _localctx.a.Type;
				}
				break;
			case TRUE:
			case FALSE:
			case ID:
			case REALCONST:
			case INTCONST:
			case STRCONST:
				{
				State = 338; _localctx._meghdar = meghdar();

																_localctx.Csharp = _localctx._meghdar.Csharp;
																_localctx.Type = _localctx._meghdar.Type;
															 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 389;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 387;
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new EbaratContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ebarat);
						State = 343;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 344; Match(PLUS);
						State = 345; _localctx.b = ebarat(12);
						_localctx.Csharp+=_localctx.a.Csharp+" + "+_localctx.b.Csharp;_localctx.Type =  tabdil_noe.karan_bala(_localctx.a.Type,_localctx.b.Type);
						}
						break;
					case 2:
						{
						_localctx = new EbaratContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ebarat);
						State = 348;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 349; Match(MINUS);
						State = 350; _localctx.b = ebarat(11);
						_localctx.Csharp+=_localctx.a.Csharp+" - "+_localctx.b.Csharp;if(!tabdil_noe.tabdil_pazir(_localctx.a.Type,"int")&!tabdil_noe.tabdil_pazir(_localctx.b.Type,"int")){_localctx.Type = "int";}
						          																else {khata_ezaf_kon("subtraction  not compare with "+_localctx.a.Type+" and "+_localctx.b.Type);_localctx.Type = "no_type";}
						}
						break;
					case 3:
						{
						_localctx = new EbaratContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ebarat);
						State = 353;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 354; Match(MULTIPLIE);
						State = 355; _localctx.b = ebarat(10);
						_localctx.Csharp+=_localctx.a.Csharp+" * "+_localctx.b.Csharp;if(!tabdil_noe.tabdil_pazir(_localctx.a.Type,"int")&!tabdil_noe.tabdil_pazir(_localctx.b.Type,"int")){_localctx.Type = "int";}
						          																 else {khata_ezaf_kon("multiply  not compare with "+_localctx.a.Type+" and "+_localctx.b.Type);_localctx.Type = "no_type";}
						}
						break;
					case 4:
						{
						_localctx = new EbaratContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ebarat);
						State = 358;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 359; Match(DIVIDE);
						State = 360; _localctx.b = ebarat(9);
						_localctx.Csharp+=_localctx.a.Csharp+@" \ "+_localctx.b.Csharp;if(!tabdil_noe.tabdil_pazir(_localctx.a.Type,"int")&!tabdil_noe.tabdil_pazir(_localctx.b.Type,"int")){_localctx.Type = "int";}
						          																 else {khata_ezaf_kon("subtraction  not compare with "+_localctx.a.Type+" and "+_localctx.b.Type);_localctx.Type = "no_type";}
						}
						break;
					case 5:
						{
						_localctx = new EbaratContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ebarat);
						State = 363;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 364; Match(POWER);
						State = 365; _localctx.b = ebarat(7);
						_localctx.Csharp+=_localctx.a.Csharp+" ^ "+_localctx.b.Csharp;if(!tabdil_noe.tabdil_pazir(_localctx.a.Type,"int")&!tabdil_noe.tabdil_pazir(_localctx.b.Type,"int"))_localctx.Type = "int";
						          															   else {khata_ezaf_kon("power  not compare with "+_localctx.a.Type+" and "+_localctx.b.Type);_localctx.Type = "no_type";}
						}
						break;
					case 6:
						{
						_localctx = new EbaratContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ebarat);
						State = 368;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 369; Match(AND);
						State = 370; _localctx.b = ebarat(6);
							
						          											_localctx.Csharp+=_localctx.a.Csharp+" & "+_localctx.b.Csharp;
						          											if(tabdil_noe.tabdil_pazir(_localctx.a.Type,"bool"))
						          											{
						          											khata_ezaf_kon("AND operator can't use for "+_localctx.a.Type+" type");
						          											_localctx.Type = "no_type";
						          											}
						          											if(tabdil_noe.tabdil_pazir(_localctx.b.Type,"bool" ))
						          											{
						          											khata_ezaf_kon("AND operator can't use for "+_localctx.b.Type+" type");
						          											_localctx.Type = "no_type";
						          											}
						          										
						}
						break;
					case 7:
						{
						_localctx = new EbaratContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ebarat);
						State = 373;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 374; Match(OR);
						State = 375; _localctx.b = ebarat(5);

						          											_localctx.Csharp+=_localctx.a.Csharp+" | "+_localctx.b.Csharp;
						          											if(tabdil_noe.tabdil_pazir(_localctx.a.Type,"bool"))
						          											{
						          											
						          											khata_ezaf_kon("OR operator can't use for "+_localctx.a.Type+" type");
						          											_localctx.Type = "no_type";
						          											}
						          											if(tabdil_noe.tabdil_pazir(_localctx.b.Type,"bool" ))
						          											{
						          											khata_ezaf_kon("OR operator can't use for "+_localctx.b.Type+" type");
						          											_localctx.Type = "no_type";
						          											}
						          										
						}
						break;
					case 8:
						{
						_localctx = new EbaratContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ebarat);
						State = 378;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 379; _localctx._ghias = ghias();
						State = 380; _localctx.b = ebarat(4);
						}
						break;
					case 9:
						{
						_localctx = new EbaratContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ebarat);
						State = 382;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 383; Match(OR);
						State = 384; _localctx.b = ebarat(3);

						          											_localctx.Csharp+=_localctx.a.Csharp+_localctx._ghias.Csharp+_localctx.b.Csharp;
						          											if(tabdil_noe.tabdil_pazir(_localctx.a.Type,"bool")|tabdil_noe.tabdil_pazir(_localctx.b.Type,"bool"))
						          											{
						          											
						          											khata_ezaf_kon("can not compare between "+_localctx.a.Type+" and "+_localctx.b.Type);
						          											_localctx.Type = "no_type";
						          											}
						          										
						}
						break;
					}
					} 
				}
				State = 391;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return ebarat_sempred((EbaratContext)_localctx, predIndex);
		}
		return true;
	}
	private bool ebarat_sempred(EbaratContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3:\x18B\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2)\n\x2\f\x2"+
		"\xE\x2,\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3<\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4M\n"+
		"\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x63\n\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\a\ap\n\a"+
		"\f\a\xE\as\v\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\a\b\x82\n\b\f\b\xE\b\x85\v\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\a\b\x8D\n\b\f\b\xE\b\x90\v\b\x3\b\x3\b\x5\b\x94\n\b\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\a\t\x9D\n\t\f\t\xE\t\xA0\v\t\x3\t\x3\t\x3\t\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xAF\n\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\xBB\n\n\f\n\xE\n\xBE\v\n\x3\n"+
		"\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v"+
		"\xCE\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\xDA\n\v"+
		"\f\v\xE\v\xDD\v\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x5\f\xEC\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xFD\n\xE\f\xE\xE\xE\x100"+
		"\v\xE\x5\xE\x102\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x12A\n\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x6\x10\x134\n\x10\r\x10\xE"+
		"\x10\x135\x5\x10\x138\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x5\x10\x140\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x147\n\x10"+
		"\f\x10\xE\x10\x14A\v\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x158\n\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\a\x11\x186\n\x11\f\x11\xE\x11\x189\v\x11\x3\x11\x2\x3 "+
		"\x12\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \x2\x2\x1B3\x2"+
		"*\x3\x2\x2\x2\x4;\x3\x2\x2\x2\x6L\x3\x2\x2\x2\b\x62\x3\x2\x2\x2\n\x64"+
		"\x3\x2\x2\x2\fj\x3\x2\x2\x2\xEw\x3\x2\x2\x2\x10\x95\x3\x2\x2\x2\x12\xA4"+
		"\x3\x2\x2\x2\x14\xC2\x3\x2\x2\x2\x16\xEB\x3\x2\x2\x2\x18\xED\x3\x2\x2"+
		"\x2\x1A\xF3\x3\x2\x2\x2\x1C\x129\x3\x2\x2\x2\x1E\x12B\x3\x2\x2\x2 \x157"+
		"\x3\x2\x2\x2\"#\x5\x1E\x10\x2#$\b\x2\x1\x2$)\x3\x2\x2\x2%&\x5\x18\r\x2"+
		"&\'\b\x2\x1\x2\')\x3\x2\x2\x2(\"\x3\x2\x2\x2(%\x3\x2\x2\x2),\x3\x2\x2"+
		"\x2*(\x3\x2\x2\x2*+\x3\x2\x2\x2+-\x3\x2\x2\x2,*\x3\x2\x2\x2-.\a\x2\x2"+
		"\x3.\x3\x3\x2\x2\x2/\x30\a)\x2\x2\x30<\b\x3\x1\x2\x31\x32\a*\x2\x2\x32"+
		"<\b\x3\x1\x2\x33\x34\a+\x2\x2\x34<\b\x3\x1\x2\x35\x36\a,\x2\x2\x36<\b"+
		"\x3\x1\x2\x37\x38\a.\x2\x2\x38<\b\x3\x1\x2\x39:\a-\x2\x2:<\b\x3\x1\x2"+
		";/\x3\x2\x2\x2;\x31\x3\x2\x2\x2;\x33\x3\x2\x2\x2;\x35\x3\x2\x2\x2;\x37"+
		"\x3\x2\x2\x2;\x39\x3\x2\x2\x2<\x5\x3\x2\x2\x2=>\a\x32\x2\x2>M\b\x4\x1"+
		"\x2?@\a\x35\x2\x2@M\b\x4\x1\x2\x41\x42\a\x34\x2\x2\x42M\b\x4\x1\x2\x43"+
		"\x44\x5\x1A\xE\x2\x44\x45\b\x4\x1\x2\x45M\x3\x2\x2\x2\x46G\a\x37\x2\x2"+
		"GM\b\x4\x1\x2HI\a\x19\x2\x2IM\b\x4\x1\x2JK\a\x1A\x2\x2KM\b\x4\x1\x2L="+
		"\x3\x2\x2\x2L?\x3\x2\x2\x2L\x41\x3\x2\x2\x2L\x43\x3\x2\x2\x2L\x46\x3\x2"+
		"\x2\x2LH\x3\x2\x2\x2LJ\x3\x2\x2\x2M\a\x3\x2\x2\x2NO\a\x14\x2\x2OP\a\x1C"+
		"\x2\x2PQ\x5 \x11\x2QR\b\x5\x1\x2RS\a\x1D\x2\x2S\x63\x3\x2\x2\x2TU\a\x12"+
		"\x2\x2UV\a\x1C\x2\x2VW\a\x32\x2\x2WX\b\x5\x1\x2X\x63\a\x1D\x2\x2YZ\a\x13"+
		"\x2\x2Z[\a\x1C\x2\x2[\\\a\x32\x2\x2\\]\b\x5\x1\x2]\x63\a\x1D\x2\x2^_\a"+
		"\x12\x2\x2_`\a\x1C\x2\x2`\x61\b\x5\x1\x2\x61\x63\a\x1D\x2\x2\x62N\x3\x2"+
		"\x2\x2\x62T\x3\x2\x2\x2\x62Y\x3\x2\x2\x2\x62^\x3\x2\x2\x2\x63\t\x3\x2"+
		"\x2\x2\x64\x65\a\x32\x2\x2\x65\x66\a!\x2\x2\x66g\x5 \x11\x2gh\b\x6\x1"+
		"\x2hi\a\x31\x2\x2i\v\x3\x2\x2\x2jk\a\xE\x2\x2kq\b\a\x1\x2lm\x5\x1C\xF"+
		"\x2mn\b\a\x1\x2np\x3\x2\x2\x2ol\x3\x2\x2\x2ps\x3\x2\x2\x2qo\x3\x2\x2\x2"+
		"qr\x3\x2\x2\x2rt\x3\x2\x2\x2sq\x3\x2\x2\x2tu\a\xF\x2\x2uv\b\a\x1\x2v\r"+
		"\x3\x2\x2\x2wx\a\b\x2\x2xy\x5 \x11\x2yz\b\b\x1\x2z{\a\r\x2\x2{|\x5\f\a"+
		"\x2|\x83\b\b\x1\x2}~\a\x11\x2\x2~\x7F\x5\xE\b\x2\x7F\x80\b\b\x1\x2\x80"+
		"\x82\x3\x2\x2\x2\x81}\x3\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83\x81\x3\x2\x2"+
		"\x2\x83\x84\x3\x2\x2\x2\x84\x93\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x86\x87"+
		"\a\x11\x2\x2\x87\x88\a\xE\x2\x2\x88\x8E\b\b\x1\x2\x89\x8A\x5\x1C\xF\x2"+
		"\x8A\x8B\b\b\x1\x2\x8B\x8D\x3\x2\x2\x2\x8C\x89\x3\x2\x2\x2\x8D\x90\x3"+
		"\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x91\x3\x2\x2\x2"+
		"\x90\x8E\x3\x2\x2\x2\x91\x92\a\xF\x2\x2\x92\x94\b\b\x1\x2\x93\x86\x3\x2"+
		"\x2\x2\x93\x94\x3\x2\x2\x2\x94\xF\x3\x2\x2\x2\x95\x96\a\x10\x2\x2\x96"+
		"\x97\x5 \x11\x2\x97\x98\b\t\x1\x2\x98\x9E\a\xE\x2\x2\x99\x9A\x5\x1C\xF"+
		"\x2\x9A\x9B\b\t\x1\x2\x9B\x9D\x3\x2\x2\x2\x9C\x99\x3\x2\x2\x2\x9D\xA0"+
		"\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA1\x3\x2\x2"+
		"\x2\xA0\x9E\x3\x2\x2\x2\xA1\xA2\a\xF\x2\x2\xA2\xA3\b\t\x1\x2\xA3\x11\x3"+
		"\x2\x2\x2\xA4\xA5\a\n\x2\x2\xA5\xAE\b\n\x1\x2\xA6\xA7\a\x32\x2\x2\xA7"+
		"\xAF\b\n\x1\x2\xA8\xA9\x5\x18\r\x2\xA9\xAA\b\n\x1\x2\xAA\xAF\x3\x2\x2"+
		"\x2\xAB\xAC\x5\n\x6\x2\xAC\xAD\b\n\x1\x2\xAD\xAF\x3\x2\x2\x2\xAE\xA6\x3"+
		"\x2\x2\x2\xAE\xA8\x3\x2\x2\x2\xAE\xAB\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2"+
		"\xB0\xB1\b\n\x1\x2\xB1\xB2\a\t\x2\x2\xB2\xB3\x5 \x11\x2\xB3\xB4\b\n\x1"+
		"\x2\xB4\xB5\a\r\x2\x2\xB5\xB6\a\xE\x2\x2\xB6\xBC\b\n\x1\x2\xB7\xB8\x5"+
		"\x1C\xF\x2\xB8\xB9\b\n\x1\x2\xB9\xBB\x3\x2\x2\x2\xBA\xB7\x3\x2\x2\x2\xBB"+
		"\xBE\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBF\x3\x2"+
		"\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF\xC0\a\xF\x2\x2\xC0\xC1\b\n\x1\x2\xC1\x13"+
		"\x3\x2\x2\x2\xC2\xC3\a\v\x2\x2\xC3\xCD\b\v\x1\x2\xC4\xC5\a\x32\x2\x2\xC5"+
		"\xCE\b\v\x1\x2\xC6\xC7\x5\x18\r\x2\xC7\xC8\b\v\x1\x2\xC8\xCE\x3\x2\x2"+
		"\x2\xC9\xCE\x3\x2\x2\x2\xCA\xCB\x5\n\x6\x2\xCB\xCC\b\v\x1\x2\xCC\xCE\x3"+
		"\x2\x2\x2\xCD\xC4\x3\x2\x2\x2\xCD\xC6\x3\x2\x2\x2\xCD\xC9\x3\x2\x2\x2"+
		"\xCD\xCA\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD0\b\v\x1\x2\xD0\xD1\a\t"+
		"\x2\x2\xD1\xD2\x5 \x11\x2\xD2\xD3\b\v\x1\x2\xD3\xD4\a\r\x2\x2\xD4\xD5"+
		"\a\xE\x2\x2\xD5\xDB\b\v\x1\x2\xD6\xD7\x5\x1C\xF\x2\xD7\xD8\b\v\x1\x2\xD8"+
		"\xDA\x3\x2\x2\x2\xD9\xD6\x3\x2\x2\x2\xDA\xDD\x3\x2\x2\x2\xDB\xD9\x3\x2"+
		"\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDE\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDE"+
		"\xDF\a\xF\x2\x2\xDF\xE0\b\v\x1\x2\xE0\x15\x3\x2\x2\x2\xE1\xE2\a\x3\x2"+
		"\x2\xE2\xEC\b\f\x1\x2\xE3\xE4\a\x4\x2\x2\xE4\xEC\b\f\x1\x2\xE5\xE6\a\x5"+
		"\x2\x2\xE6\xEC\b\f\x1\x2\xE7\xE8\a\x5\x2\x2\xE8\xEC\b\f\x1\x2\xE9\xEA"+
		"\a\x5\x2\x2\xEA\xEC\b\f\x1\x2\xEB\xE1\x3\x2\x2\x2\xEB\xE3\x3\x2\x2\x2"+
		"\xEB\xE5\x3\x2\x2\x2\xEB\xE7\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEC\x17\x3"+
		"\x2\x2\x2\xED\xEE\a\x32\x2\x2\xEE\xEF\a\x30\x2\x2\xEF\xF0\x5\x16\f\x2"+
		"\xF0\xF1\a\x31\x2\x2\xF1\xF2\b\r\x1\x2\xF2\x19\x3\x2\x2\x2\xF3\xF4\a\x32"+
		"\x2\x2\xF4\xF5\b\xE\x1\x2\xF5\x101\a\x1C\x2\x2\xF6\xF7\x5 \x11\x2\xF7"+
		"\xFE\b\xE\x1\x2\xF8\xF9\a:\x2\x2\xF9\xFA\x5 \x11\x2\xFA\xFB\b\xE\x1\x2"+
		"\xFB\xFD\x3\x2\x2\x2\xFC\xF8\x3\x2\x2\x2\xFD\x100\x3\x2\x2\x2\xFE\xFC"+
		"\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x102\x3\x2\x2\x2\x100\xFE\x3\x2\x2"+
		"\x2\x101\xF6\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103"+
		"\x104\b\xE\x1\x2\x104\x105\a\x1D\x2\x2\x105\x106\b\xE\x1\x2\x106\x1B\x3"+
		"\x2\x2\x2\x107\x108\x5\n\x6\x2\x108\x109\b\xF\x1\x2\x109\x12A\x3\x2\x2"+
		"\x2\x10A\x10B\a\x18\x2\x2\x10B\x10C\x5 \x11\x2\x10C\x10D\a\x31\x2\x2\x10D"+
		"\x10E\b\xF\x1\x2\x10E\x12A\x3\x2\x2\x2\x10F\x110\x5\xE\b\x2\x110\x111"+
		"\b\xF\x1\x2\x111\x12A\x3\x2\x2\x2\x112\x113\x5\x10\t\x2\x113\x114\b\xF"+
		"\x1\x2\x114\x12A\x3\x2\x2\x2\x115\x116\x5\x1A\xE\x2\x116\x117\a\x31\x2"+
		"\x2\x117\x118\b\xF\x1\x2\x118\x12A\x3\x2\x2\x2\x119\x11A\x5\b\x5\x2\x11A"+
		"\x11B\a\x31\x2\x2\x11B\x11C\b\xF\x1\x2\x11C\x12A\x3\x2\x2\x2\x11D\x11E"+
		"\x5\x18\r\x2\x11E\x11F\b\xF\x1\x2\x11F\x12A\x3\x2\x2\x2\x120\x121\x5\x12"+
		"\n\x2\x121\x122\b\xF\x1\x2\x122\x12A\x3\x2\x2\x2\x123\x124\x5\x14\v\x2"+
		"\x124\x125\b\xF\x1\x2\x125\x12A\x3\x2\x2\x2\x126\x127\x5\f\a\x2\x127\x128"+
		"\b\xF\x1\x2\x128\x12A\x3\x2\x2\x2\x129\x107\x3\x2\x2\x2\x129\x10A\x3\x2"+
		"\x2\x2\x129\x10F\x3\x2\x2\x2\x129\x112\x3\x2\x2\x2\x129\x115\x3\x2\x2"+
		"\x2\x129\x119\x3\x2\x2\x2\x129\x11D\x3\x2\x2\x2\x129\x120\x3\x2\x2\x2"+
		"\x129\x123\x3\x2\x2\x2\x129\x126\x3\x2\x2\x2\x12A\x1D\x3\x2\x2\x2\x12B"+
		"\x12C\a\x15\x2\x2\x12C\x12D\a\x32\x2\x2\x12D\x137\b\x10\x1\x2\x12E\x12F"+
		"\a\x16\x2\x2\x12F\x133\a\x30\x2\x2\x130\x131\x5\x18\r\x2\x131\x132\b\x10"+
		"\x1\x2\x132\x134\x3\x2\x2\x2\x133\x130\x3\x2\x2\x2\x134\x135\x3\x2\x2"+
		"\x2\x135\x133\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x138\x3\x2\x2\x2"+
		"\x137\x12E\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138\x13F\x3\x2\x2\x2\x139"+
		"\x13A\a\x17\x2\x2\x13A\x13B\a\x30\x2\x2\x13B\x13C\x5\x16\f\x2\x13C\x13D"+
		"\a\x31\x2\x2\x13D\x13E\b\x10\x1\x2\x13E\x140\x3\x2\x2\x2\x13F\x139\x3"+
		"\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x142\a\xE\x2"+
		"\x2\x142\x148\b\x10\x1\x2\x143\x144\x5\x1C\xF\x2\x144\x145\b\x10\x1\x2"+
		"\x145\x147\x3\x2\x2\x2\x146\x143\x3\x2\x2\x2\x147\x14A\x3\x2\x2\x2\x148"+
		"\x146\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14B\x3\x2\x2\x2\x14A\x148"+
		"\x3\x2\x2\x2\x14B\x14C\a\xF\x2\x2\x14C\x14D\b\x10\x1\x2\x14D\x1F\x3\x2"+
		"\x2\x2\x14E\x14F\b\x11\x1\x2\x14F\x150\a\x1C\x2\x2\x150\x151\x5 \x11\x2"+
		"\x151\x152\a\x1D\x2\x2\x152\x153\b\x11\x1\x2\x153\x158\x3\x2\x2\x2\x154"+
		"\x155\x5\x6\x4\x2\x155\x156\b\x11\x1\x2\x156\x158\x3\x2\x2\x2\x157\x14E"+
		"\x3\x2\x2\x2\x157\x154\x3\x2\x2\x2\x158\x187\x3\x2\x2\x2\x159\x15A\f\r"+
		"\x2\x2\x15A\x15B\a\x1B\x2\x2\x15B\x15C\x5 \x11\xE\x15C\x15D\b\x11\x1\x2"+
		"\x15D\x186\x3\x2\x2\x2\x15E\x15F\f\f\x2\x2\x15F\x160\a\x1E\x2\x2\x160"+
		"\x161\x5 \x11\r\x161\x162\b\x11\x1\x2\x162\x186\x3\x2\x2\x2\x163\x164"+
		"\f\v\x2\x2\x164\x165\a\x1F\x2\x2\x165\x166\x5 \x11\f\x166\x167\b\x11\x1"+
		"\x2\x167\x186\x3\x2\x2\x2\x168\x169\f\n\x2\x2\x169\x16A\a \x2\x2\x16A"+
		"\x16B\x5 \x11\v\x16B\x16C\b\x11\x1\x2\x16C\x186\x3\x2\x2\x2\x16D\x16E"+
		"\f\b\x2\x2\x16E\x16F\a$\x2\x2\x16F\x170\x5 \x11\t\x170\x171\b\x11\x1\x2"+
		"\x171\x186\x3\x2\x2\x2\x172\x173\f\a\x2\x2\x173\x174\a%\x2\x2\x174\x175"+
		"\x5 \x11\b\x175\x176\b\x11\x1\x2\x176\x186\x3\x2\x2\x2\x177\x178\f\x6"+
		"\x2\x2\x178\x179\a&\x2\x2\x179\x17A\x5 \x11\a\x17A\x17B\b\x11\x1\x2\x17B"+
		"\x186\x3\x2\x2\x2\x17C\x17D\f\x5\x2\x2\x17D\x17E\x5\x4\x3\x2\x17E\x17F"+
		"\x5 \x11\x6\x17F\x186\x3\x2\x2\x2\x180\x181\f\x4\x2\x2\x181\x182\a&\x2"+
		"\x2\x182\x183\x5 \x11\x5\x183\x184\b\x11\x1\x2\x184\x186\x3\x2\x2\x2\x185"+
		"\x159\x3\x2\x2\x2\x185\x15E\x3\x2\x2\x2\x185\x163\x3\x2\x2\x2\x185\x168"+
		"\x3\x2\x2\x2\x185\x16D\x3\x2\x2\x2\x185\x172\x3\x2\x2\x2\x185\x177\x3"+
		"\x2\x2\x2\x185\x17C\x3\x2\x2\x2\x185\x180\x3\x2\x2\x2\x186\x189\x3\x2"+
		"\x2\x2\x187\x185\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188!\x3\x2\x2\x2\x189"+
		"\x187\x3\x2\x2\x2\x1B(*;L\x62q\x83\x8E\x93\x9E\xAE\xBC\xCD\xDB\xEB\xFE"+
		"\x101\x129\x135\x137\x13F\x148\x157\x185\x187";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
